{
  "id": "7",
  "wording": "Javascript это язык программирования больше",
  "pointsAvailable": 0.8,
  "options": {
    "a": "функциональный, поскольку почти весь код обычно размещается в функциях",
    "b": "объектно-ориентированный, поскольку даже функции в нем это объекты"
  },
  "correctOptions": ["a"],
  "themes": ["js", "js-functions"]
}
{
  "id": "8",
  "wording": "Функции в JS обладают всеми свойствами объектов",
  "pointsAvailable": 0.8,
  "options": {
    "a": "да",
    "b": "нет"
  },
  "correctOptions": ["a"],
  "themes": ["js", "js-functions"]
}
{
  "id": "9",
  "wording": "Функции в JS можно",
  "pointsAvailable": 1.2,
  "options": {
     "a": "создавать с помощью литералов",
     "b": "присваивать переменным",
     "c": "присваивать элементам массивов",
     "d": "присваивать свойствам других объектов",
     "e": "передавать в качестве аргументов другим функциям",
     "f": "возвращать в качестве значений из других функций",
     "g": "наделять свойствами"
  },
  "correctOptions": ["a", "b", "c", "d", "e", "f", "g"],
  "themes": ["js", "js-functions"]
}
{
  "id": "10",
  "wording": "Функция высшего порядка",
  "pointsAvailable": 1,
  "options": {
    "a": "может принимать в качестве аргументов другие функции",
    "b": "может возвращать другую функцию в качестве результата"
  },
  "correctOptions": ["a", "b"],
  "themes": ["js", "js-functions"]
}
{
  "id": "11",
  "wording": "Функцией обратного вызова можно назвать функцию созданную",
  "pointsAvailable": 1,
  "options": {
    "a": "для вызова из браузера",
    "b": "для вызова из другого куска кода",
    "c": "для передачи в качестве аргумента другой функции"
  },
  "correctOptions": ["a", "b", "c"],
  "themes": ["js", "js-functions"]
}
{
  "id": "12",
  "code": "function myFun() {\n  return 1;\n}",
  "wording": "Это пример определения функции с помощью",
  "pointsAvailable": 0.8,
  "options": {
    "a": "объявления функции (Function Declaration)",
    "b": "функционального выражения (Function Expression)",
    "с": "конструктора функций"
  },
  "correctOptions": ["a"],
  "themes": ["js", "js-functions"]
}
{
  "id": "13",
  "code": "new Function('a', 'b', 'return a + b');",
  "wording": "Это пример определения функции с помощью",
  "pointsAvailable": 1.2,
  "options": {
    "a": "объявления функции (Function Declaration)",
    "b": "функционального выражения (Function Expression)",
    "с": "конструктора функций",
    "d": "нет правильных ответов"
  },
  "correctOptions": ["d"],
  "themes": ["js", "js-functions"]
}
{
  "id": "14",
  "code": "function myFunction(myFirstArg, mysecondArg) {\n  myStatement1;\n  myStatement2;\n}",
  "wording": "Какие элементы при таком определении функции не являются обязательными?",
  "pointsAvailable": 0.8,
  "options": {
    "a": "слово function",
    "b": "имя функции",
    "c": "круглые скобки",
    "d": "параметры",
    "e": "фигурные скобки",
    "f": "операторы"
  },
  "correctOptions": ["d", "f"],
  "themes": ["js", "js-functions"]
}
{
  "id": "15",
  "wording": "Имя функции должно быть обязательно указано при ее определении с помощью",
  "pointsAvailable": 0.8,
  "options": {
    "a": "объявления функции (Function Declaration)",
    "b": "функционального выражения (Function Expression)",
    "c": "стрелочной функции"
  },
  "correctOptions": ["a"],
  "themes": ["js", "js-functions"]
}
{
  "id": "16",
  "wording": "В каком случае будет ошибка?",
  "pointsAvailable": 1.2,
  "options": {
    "a": "<code>function myFunc() {}();</code>",
    "b": "<code>(function myFunc() {})();</code>",
    "c": "<code>function(){}();</code>",
    "d": "<code>(function(){}());</code>",
    "f": "<code>(function(){})();</code>",
    "g": "<code>+function(){}();</code>",
    "h": "<code>~function(){}();</code>"
  },
  "correctOptions": ["a", "c"],
  "themes": ["js", "js-functions"]
}
{
  "id": "17",
  "code": "a) [1, 2, 3].sort(function sortAsc(a,b) {return b - a;});\n\nb) function ninja() {}\n   ninja();\n\nc) var myButton = document.getElementByid('myButton');\n   myButton.addEventListener('click', function () {alert ('Clicked');});",
  "wording": "Kaкие функции являются функциями обратного вызова?",
  "pointsAvailable": 0.8,
  "options": {
    "a": "a",
    "b": "b",
    "c": "c"
  },
  "correctOptions": ["a", "c"],
  "themes": ["js", "js-functions"]
}
{
  "id": "18",
  "wording": "Какой синтаксис стрелочной функции приведет к ошибке?",
  "pointsAvailable": 1,
  "options": {
    "a": "<code>const myFunc = param1, param2 => param1 - param2;</code>",
    "c": "<code>const myFunc = param1, param2 => {return param1 - param2};</code>",
    "b": "<code>const myFunc = param1 => param1 - param2;</code>"
  },
  "correctOptions": ["a", "b"],
  "themes": ["js", "js-functions"]
}
{
  "id": "19",
  "wording": "Аргумент функции это",
  "pointsAvailable": 0.8,
  "options": {
    "a": "значение, которое передается функции при ее вызове",
    "b": "переменная, которая указывается как часть определения функции"
  },
  "correctOptions": ["a"],
  "themes": ["js", "js-functions"]
}
{
  "id": "20",
  "code": "function skulk(ninja) {\n  return performAction(ninja, 'skulking');\n}",
  "wording": "В этом примере",
  "pointsAvailable": 1,
  "options": {
    "a": "параметр <code>ninja</code> функции <code>skulk()</code> передается в качестве аргумента функции <code>performAction()</code>",
    "b": "аргумент <code>ninja</code> функции <code>skulk()</code> передается в качестве параметра функции <code>performAction()</code>"
  },
  "correctOptions": ["a"],
  "themes": ["js", "js-functions"]
}
{
  "id": "21",
  "code": "function performAction(ninja, action: 'jumping') {\n  return ninja + ' ' + action;\n}",
  "wording": "Какой будет результат вызова функции <code>performAction('Fuma', undefined)</code>?",
  "pointsAvailable": 1,
  "options": {
    "a": "<code>Fuma undefined</code>",
    "b": "<code>Fuma jumping</code>",
    "c": "будет ошибка"
  },
  "correctOptions": ["a"],
  "themes": ["js", "js-functions"]
}
{
  "id": "22",
  "code": "a) numbers.sort(function sortAsc(a,b) {return a - b;});\n\nb) numbers.sort(a, b => b - a);\n\nc) (function () {})();\n\nd) function outer () {\n     function inner() {}\n     return inner;\n   }\n\ne) (function () {}());\n\nf) (() =>'Yoshi')();",
  "wording": "Разделите правильные определения функции по типам",
  "pointsAvailable": 1,
  "options": {
    "a": "Function Expression: a, c, e; Function Declaration: d; Стрелочные: а",
    "b": "Function Expression: a, c, e; Function Declaration: d; Стрелочные: а",
    "c": "Function Expression: a, c, e; Function Declaration: d; Стрелочные: а"
  },
  "correctOptions": ["c"],
  "themes": ["js", "js-functions"]
}
{
  "id": "23",
  "code": "var ninja = ((name = 'Fuma') => {'Yoshi'})();",
  "wording": "Какое значение примет переменная <code>ninja</code> после выполнения кода?",
  "pointsAvailable": 1,
  "options": {
    "a": "<code>undefined</code>",
    "b": "<code>Fuma</code>",
    "c": "<code>Yoshi</code>",
    "d": "нет правильных ответов"
  },
  "correctOptions": ["a"],
  "themes": ["js", "js-functions"]
}
{
  "id": "24",
  "code": "function test(a, b, ...c) { /*a, b, c*/ }",
  "wording": "Какое значение принимает параметр с в теле функции <code>test</code> при таком ее вызове: <code>test()</code>?",
  "pointsAvailable": 1,
  "options": {
    "a": "<code>undefined</code>",
    "b": "<code>null</code>",
    "c": "при вызове функции будет ошибка",
    "d": "нет правильных ответов"
  },
  "correctOptions": ["d"],
  "themes": ["js", "js-functions"]
}
{
  "id": "25",
  "wording": "Параметр this для функции",
  "pointsAvailable": 1,
  "options": {
    "a": "представляет контест функции",
    "b": "представляет объект для которого эта функция вызывается",
    "c": "это неявный (не указанный в сигнатуре функции) параметр"
  },
  "correctOptions": ["a", "b", "c"],
  "themes": ["js", "js-functions"]
}
{
  "id": "26",
  "code": "'use strict';\n\nfunction infiltrate(person) {\n  arguments[0] = 'ninja';\n  console.log('The person is a ' + person);\n}",
  "wording": "Что выведет в консоль вызов <code>infiltrate('gardener')</code>?",
  "pointsAvailable": 1,
  "options": {
    "a": "The person is a gardener",
    "b": "The person is a ninja",
    "c": "будет ошибка"
  },
  "correctOptions": ["a"],
  "themes": ["js", "js-functions"]
}
{
  "id": "27",
  "code": "function Emperor() {\n  this.rules = true;\n  return 1;\n}\n\nvar emperor = new Emperor();",
  "wording": "Значение <code>emperor</code>  будет",
  "pointsAvailable": 1,
  "options": {
    "a": "<code>{rules: true}</code>",
    "b": "<code>1</code>",
    "c": "будет ошибка"
  },
  "correctOptions": ["b"],
  "themes": ["js", "js-functions"]
}
{
  "id": "28",
  "wording": "Метод <code>call()</code>",
  "pointsAvailable": 1,
  "options": {
    "a": "существует для каждой функции",
    "b": "вызывает функцию",
    "c": "указывает на объект который будет служить в качестве контекста функции"
  },
  "correctOptions": ["a", "b", "c"],
  "themes": ["js", "js-functions"]
}
{
  "id": "29",
  "wording": "Стрелочные функции",
  "pointsAvailable": 1,
  "options": {
    "a": "позволяют создавать функции более изящно, чем Function Expression и Function Declaration",
    "b": "не имеют собственного <code>this</code>",
    "c": "запоминают определение <code>this</code> в момент своего определения"
  },
  "correctOptions": ["a", "b", "c"],
  "themes": ["js", "js-functions"]
}
{
  "id": "30",
  "code": "var param = true;\n\nvar obj = {\n  param: false,\n  showParam: () => {\n    сonsole.log(this.param);\n}};",
  "wording": "Какой будет результат вызова метода <code>obj.showParam()</code>",
  "pointsAvailable": 1,
  "options": {
    "a": "<code>true</code>",
    "b": "<code><code>false</code></code>",
    "c": "ошибка"
  },
  "correctOptions": ["a"],
  "themes": ["js", "js-functions"]
}
{
  "id": "31",
  "code": "function Ninja() {\n  this.whoAmI = function () {\n    return this;\n  }.bind (this);\n}\n\nvar ninjal = new Ninja();\n\nvar ninja2 = {\n  whoAmI: ninjal.whoAmI\n};",
  "wording": "Какой будет результат вызова метода <code>ninja2.whoAmI()</code>?",
  "pointsAvailable": 1.2,
  "options": {
    "a": "<code>ninja1</code>",
    "b": "<code>ninja2</code>",
    "c": "ошибка"
  },
  "correctOptions": ["a"],
  "themes": ["js", "js-functions"]
}
{
  "id": "32",
  "code": "var person = 'samurai';\nvar later;\n\nfunction outerFunction() {\n     person = 'ninja';\n\n     function innerFunction() {\n
      console.log('I am a ' + person);\n
    }\n\n
    later = innerFunction;\n
  }\n\n
  outerFunction();\n
  later();",
  "wording": "Какой будет результат выполнения этого кода?",
  "pointsAvailable": 1.2,
  "options": {
    "a": "<code>I am a samurai</code>",
    "b": "<code>I am a ninja</code>",
    "c": "ошибка"
  },
  "correctOptions": ["b"],
  "themes": ["js", "js-functions"]
}
{
  "id": "33",
  "wording": "Выберите правильные утверждения: 'Контекст выполнения функции ..",
  "pointsAvailable": 1,
  "options": {
    "a": "это объект для которого она вызывается",
    "b": "используется в интерпретаторе JS для слежения за ходом выполнения функции",
    "c": "может быть доступным через параметр  this",
    "d": "можно отслеживать через Call Stack в Chrome DevTools"

  },
  "correctOptions": ["b", "d"],
  "themes": ["js", "js-functions"]
}
